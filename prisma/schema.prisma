// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Retailer {
  id Int @id @default(autoincrement())
  email String @db.VarChar(200) @unique
  phone String @db.VarChar(200) 
  zone String
  acronym String
  validated Boolean
  merchantId Int
  users User[]
  active Boolean
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  merchant Merchant @relation(fields: [merchantId] , references: [id])
  @@map("retailers")
}

model Merchant {
  id Int @id @default(autoincrement())
  email String @db.VarChar(200) @unique
  name String
  phone String @db.VarChar(200) @unique
  acronym String
  retailers Retailer[]
  users User[]
  validated Boolean @default(false)
  active Boolean
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("merchants")
}

model User {
  id Int @id @default(autoincrement())
  email String @db.VarChar(200) @unique
  firstName String
  lastName String
  imageUrl String? @db.VarChar(200) 
  privileges Privilege[]
  merchantId Int?
  retailerId Int?
  lastLogin DateTime
  active Boolean
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  merchant Merchant? @relation(fields: [merchantId] , references: [id])
  retailer Retailer? @relation(fields: [retailerId] , references: [id])
  @@map("users")
}

model Order {
  id Int @id @default(autoincrement())
  reference String @db.VarChar(200) @unique
  state OrderState
  couponId Int?
  shippingAdress String
  billingAdress String
  quaterId Int
  customerId Int
  accountId Int
  paymentId Int @unique
  currency String
  subTotal Float
  subTotalWithTax Float
  shippingFees Float
  orderProduct OrderProduct[]
  active Boolean
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  coupon Coupon? @relation(fields: [couponId] , references: [id])
  quater Quater @relation(fields: [quaterId] , references: [id])
  customer Customer @relation(fields: [customerId] , references: [id])
  payment Payment @relation(fields: [paymentId] , references: [id])
  @@map("orders")
}

model Transaction {
  id Int @id @default(autoincrement())
  paymentId Int
  status PaymentStatus
  amount Float
  account String
  method String
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  payment Payment @relation(fields: [paymentId] , references: [id])
  @@map("transactions")
}

model Product {
  id           Int          @id @default(autoincrement())
  name         String
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  image        String? @db.VarChar(200) 
  orderProduct OrderProduct[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  productVariants ProductVariant[]
  @@map("products")
}

model OrderProduct {
  id          Int      @id @default(autoincrement())
  orderId  Int
  productId Int
  @@index([productId])
  @@index([orderId])
  product     Product  @relation(fields: [productId], references: [id])
  order     Order  @relation(fields: [orderId], references: [id])
  @@map("order_products")
}

model ProductVariant {
  id            Int           @id @default(autoincrement())
  name          String
  price         Float
  product       Product       @relation(fields: [productId], references: [id])
  productId     Int
  description  String? @db.VarChar(200) 
  attributes ProductAttribute[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  @@map("product_variants")
}

model ProductAttribute {
  id           Int         @id @default(autoincrement())
  name         String
  unit          String? @db.VarChar(200) 
  quantity      Int?
  priceDelta    Float @default(0.0)
  productVariantId Int
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  productVariant       ProductVariant       @relation(fields: [productVariantId], references: [id])
  @@map("product_attributes")
}

model Category {
  id           Int         @id @default(autoincrement())
  name         String
  description  String? @db.VarChar(200) 
  products     Product[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@map("categories")
}


model Customer {
  id Int @id @default(autoincrement())
  name String
  email String
  orders Order[]
  accounts Account[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("customers")
}

model Payment {
  id Int @id @default(autoincrement())
  accountId Int
  order Order?
  status PaymentStatus
  transactions Transaction[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  account Account @relation(fields: [accountId] , references: [id])
  @@map("payments")
}

model Account {
  id Int @id @default(autoincrement())
  phone String @db.VarChar(200) @unique
  customerId Int
  methodId Int
  payments Payment[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  customer Customer @relation(fields: [customerId] , references: [id])
  method PaymentMethod @relation(fields: [methodId] , references: [id])
  @@map("accounts")
}

model PaymentMethod {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200) @unique
  regex String
  logoUrl String
  accounts Account[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("paymentMethods")
}

model Coupon {
  id Int @id @default(autoincrement())
  code String @db.VarChar(200) @unique
  formula Json // {mult : Float, add : Float}
  orders Order[]
  expiredOn DateTime
  qty Int @default(1)
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("coupons")
}

model Area {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200) @unique
  quaters Quater[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("areas")
}

model Quater {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200) @unique
  areaId Int
  orders Order[]
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  area Area @relation(fields: [areaId] , references: [id])
  @@map("quaters")
}

model ApiAuditLog {
  id Int @id @default(autoincrement())
  url String
  response Json
  request Json
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("apiAuditLogs")
}

model CrmAuditLog {
  id Int @id @default(autoincrement())
  email String
  scope String
  url String
  response Json
  request Json
  active Boolean
  deleted Boolean @default(false)
  createdBy String
  createdAt DateTime @updatedAt
  updatedAt DateTime @default(now())
  @@map("crmAuditLogs")
}

enum Privilege {
  USER_PRIVILEGE
  ADMIN_PRIVILEGE
  SUPER_PRIVILEGE
  VIEW_USERS
  EDIT_USERS
  DELETE_USERS
  CREATE_USERS
}

enum OrderState {
  INITIATED
  ASSIGNED
  UNASSIGNED
  USER_CANCELLED
  CANCELLED
  REJECTED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
  CANCELLED
}

enum ProductAtributeType {
  COLOR
  VOLUME
  SIZE
  TYPE
}